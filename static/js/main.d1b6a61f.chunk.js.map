{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/GameContainer/GameContainer.js","components/FoodCard/FoodCard.js","components/ScoreNav/Score.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","GameContainer","props","children","FoodCard","onClick","redisplayFood","id","alt","name","src","image","ScoreNav","href","score","topScore","App","state","food","clickedCard","includes","setState","shuffle","push","arra1","temp","index","ctr","length","Math","floor","random","console","log","this","Score","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gvDAeeA,MAZf,WACE,OACE,yBAAKC,UAAU,aACb,kDACA,sK,MCASC,MAJf,SAAuBC,GACrB,OAAO,yBAAKF,UAAU,iBAAiBE,EAAMC,W,MCahCC,MAdf,SAAkBF,GAChB,OACE,yBAAKF,UAAU,QACb,yBAAKA,UAAU,iBACb,yBACEK,QAAS,kBAAMH,EAAMI,cAAcJ,EAAMK,KACzCC,IAAKN,EAAMO,KACXC,IAAKR,EAAMS,W,MCiBNC,MAxBf,SAAkBV,GAChB,OACE,yBAAKF,UAAU,iDACb,uBAAGA,UAAU,eAAea,KAAK,KAAjC,cAGA,yBAAKb,UAAU,2BAA2BO,GAAG,qBAC3C,wBAAIP,UAAU,cACZ,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWa,KAAK,KAA7B,SACSX,EAAMY,QAGjB,wBAAId,UAAU,YACZ,uBAAGA,UAAU,WAAWa,KAAK,KAA7B,aACaX,EAAMa,e,OCkEhBC,E,2MA1EbC,MAAQ,CACNF,SAAU,EACVG,OACAC,YAAa,GACbL,MAAO,G,EAGTR,cAAgB,SAAAC,GACd,GAAI,EAAKU,MAAME,YAAYC,SAASb,GAC9B,EAAKU,MAAMF,SAAW,EAAKE,MAAMH,OACnC,EAAKO,SAAS,CACZN,SAAU,EAAKE,MAAMH,MACrBA,MAAO,EACPI,KAAM,EAAKI,QAAQJ,GACnBC,YAAa,SAGZ,CACL,IAAMA,EAAW,YAAO,EAAKF,MAAME,aACnCA,EAAYI,KAAKhB,GACjB,EAAKc,SAAS,CACZH,KAAM,EAAKI,QAAQJ,GACnBC,YAAaA,EACbL,MAAO,EAAKG,MAAMH,MAAQ,M,EAKhCQ,QAAU,SAAAE,GAMR,IALA,IACEC,EACAC,EAFEC,EAAMH,EAAMI,OAKTD,EAAM,GAEXD,EAAQG,KAAKC,MAAMD,KAAKE,SAAWJ,GAInCF,EAAOD,IAFPG,GAGAH,EAAMG,GAAOH,EAAME,GACnBF,EAAME,GAASD,EAEjB,OAAOD,G,oFAGPQ,QAAQC,IAAIC,KAAKjB,MAAMF,UACvBiB,QAAQC,IAAIC,KAAKjB,MAAMH,OACvBkB,QAAQC,IAAIC,KAAKjB,MAAME,e,+BAIf,IAAD,OACP,OACE,6BACE,kBAACgB,EAAD,CAAUrB,MAAOoB,KAAKjB,MAAMH,MAAOC,SAAUmB,KAAKjB,MAAMF,WACxD,kBAAC,EAAD,MACA,kBAAC,EAAD,KACGmB,KAAKjB,MAAMC,KAAKkB,KAAI,SAAAlB,GAAI,OACvB,kBAAC,EAAD,CACEZ,cAAe,EAAKA,cACpBC,GAAIW,EAAKX,GACT8B,IAAKnB,EAAKX,GACVE,KAAMS,EAAKT,KACXE,MAAOO,EAAKP,iB,GAnER2B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d1b6a61f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron\">\n      <h1>React Food Clicker</h1>\n      <p>\n        Welcome to the game the objective is to click the images of my favorite\n        foods and not click the same food more than once or you lose.\n      </p>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction GameContainer(props) {\n  return <div className=\"GameContainer\">{props.children}</div>;\n}\n\nexport default GameContainer;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction FoodCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img\n          onClick={() => props.redisplayFood(props.id)}\n          alt={props.name}\n          src={props.image}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default FoodCard;\n\n\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ScoreNav(props) {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n        ScoreBoard\n      </a>\n      <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            <a className=\"nav-link\" href=\"#\">\n              Score:{props.score}\n            </a>\n          </li>\n          <li className=\"nav-item\">\n            <a className=\"nav-link\" href=\"#\">\n              Top Score:{props.topScore}\n            </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n}\n\nexport default ScoreNav;\n","import React, { Component } from \"react\";\n//import HomepageImage from \"./components/HomepageImage\";\nimport Jumbotron from \"./components/Jumbotron/Jumbotron.js\";\nimport GameContainer from \"./components/GameContainer/GameContainer.js\";\nimport FoodCard from \"./components/FoodCard/FoodCard.js\";\nimport ScoreNav from \"./components/ScoreNav/Score.js\";\nimport food from \"./food.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    topScore: 0,\n    food,\n    clickedCard: [],\n    score: 0\n  };\n\n  redisplayFood = id => {\n    if (this.state.clickedCard.includes(id)) {\n      if (this.state.topScore < this.state.score) {\n        this.setState({\n          topScore: this.state.score,\n          score: 0,\n          food: this.shuffle(food),\n          clickedCard: []\n        });\n      }\n    } else {\n      const clickedCard = [...this.state.clickedCard];\n      clickedCard.push(id);\n      this.setState({\n        food: this.shuffle(food),\n        clickedCard: clickedCard,\n        score: this.state.score + 1\n      });\n    }\n  };\n  // else if loss res set state back to original\n  shuffle = arra1 => {\n    var ctr = arra1.length,\n      temp,\n      index;\n\n    // While there are elements in the array\n    while (ctr > 0) {\n      // Pick a random index\n      index = Math.floor(Math.random() * ctr);\n      // Decrease ctr by 1\n      ctr--;\n      // And swap the last element with it\n      temp = arra1[ctr];\n      arra1[ctr] = arra1[index];\n      arra1[index] = temp;\n    }\n    return arra1;\n  };\n  componentDidUpdate() {\n    console.log(this.state.topScore);\n    console.log(this.state.score);\n    console.log(this.state.clickedCard);\n  }\n\n  // Map over this.state.food and render a FoodCard component for each food object\n  render() {\n    return (\n      <div>\n        <ScoreNav score={this.state.score} topScore={this.state.topScore} />\n        <Jumbotron />\n        <GameContainer>\n          {this.state.food.map(food => (\n            <FoodCard\n              redisplayFood={this.redisplayFood}\n              id={food.id}\n              key={food.id}\n              name={food.name}\n              image={food.image}\n            />\n          ))}\n        </GameContainer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}